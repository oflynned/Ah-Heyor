#version 330 core
in vec3 FragPos;
in vec3 Normal;
in vec3 LightPos;
in vec2 TexCoords;

out vec4 color;

uniform vec3 lightColour;
uniform vec3 objectColour;
uniform sampler2D texture_diffuse1;

void main()
{   
	// ambience
	float amb_strength = 0.1f;
	vec3 ambient = amb_strength * lightColour;

	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(LightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColour;

	// specular
	float specularStrength = 0.5f;
	vec3 viewDir = normalize(-FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0f), 32);
	vec3 specular = specularStrength * spec * lightColour;

	vec3 result = (ambient + diffuse + specular) * objectColour;
	vec4 result_obj = vec4(result, 1.0f);

    color = texture(texture_diffuse1, TexCoords);
	
	//color = texture(result_obj, TexCoords);
}